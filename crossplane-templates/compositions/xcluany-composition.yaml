apiVersion: apiextensions.crossplane.io/v1
kind: Composition
metadata:
  name: xcluanys
spec:
  writeConnectionSecretsToNamespace: crossplane-system
  compositeTypeRef:
    apiVersion: eks.anycompany.com/v1alpha1
    kind: XCluany
  mode: Pipeline
  pipeline:
  - functionRef:
      name: crossplane-contrib-function-patch-and-transform
    step: patch-and-transform
    input:
      apiVersion: pt.fn.crossplane.io/v1beta1
      kind: Resources

      patchSets:
        - name: aws-region
          patches:
          - fromFieldPath: spec.parameters.region
            toFieldPath: spec.forProvider.region

      resources:
      - name: ekscluster
        base:
          apiVersion: eks.aws.upbound.io/v1beta1
          kind: Cluster
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              roleArnSelector:
                matchControllerRef: true
              vpcConfig:
              - endpointPrivateAccess: true
                endpointPublicAccess: true
                securityGroupIdSelector:
                  matchControllerRef: true
        patches:
        - type: PatchSet
          patchSetName: aws-region
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
        - fromFieldPath: spec.parameters.version
          toFieldPath: spec.forProvider.version
        - fromFieldPath: spec.parameters.vpc.subnets-private-id
          toFieldPath: spec.forProvider.vpcConfig[0].subnetIds
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.roleArnSelector.matchLabels.role
          transforms:
          - string:
              fmt: '%s-controlplane'
              type: Format
            type: string
        - fromFieldPath: metadata.name
          toFieldPath: status.clusterName
          type: ToCompositeFieldPath
        - fromFieldPath: status.conditions[0].reason
          toFieldPath: status.controlPlaneStatus
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.identity[0].oidc[0].issuer
          policy:
            fromFieldPath: Optional
          toFieldPath: status.eks.oidc
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.identity[0].oidc[0].issuer
          policy:
            fromFieldPath: Optional
          toFieldPath: status.eks.oidcUri
          transforms:
            - string:
                trim: https://
                type: TrimPrefix
              type: string
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.clusterId
          policy:
            fromFieldPath: Optional
          toFieldPath: status.eks.clusterId
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.id
          policy:
            fromFieldPath: Optional
          toFieldPath: status.eks.clusterName
          type: ToCompositeFieldPath
      - name: clusterAuth
        base:
          apiVersion: eks.aws.upbound.io/v1beta1
          kind: ClusterAuth
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              clusterNameSelector:
                matchControllerRef: true
            writeConnectionSecretToRef:
              namespace: crossplane-system
        connectionDetails:
        - fromConnectionSecretKey: kubeconfig
          name: kubeconfig
          type: FromConnectionSecretKey
        patches:
        - type: PatchSet
          patchSetName: aws-region
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
        - fromFieldPath: spec.id
          toFieldPath: spec.writeConnectionSecretToRef.name
          transforms:
          - string:
              fmt: '%s-cluster'
              type: Format
            type: string
        # - fromFieldPath: spec.claimRef.namespace
        #   toFieldPath: spec.writeConnectionSecretToRef.namespace
      - name: eksnodegroup
        base:
          apiVersion: eks.aws.upbound.io/v1beta1
          kind: NodeGroup
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              clusterNameSelector:
                matchControllerRef: true
              instanceTypes:
              - t3.small
              nodeRoleArnSelector:
                matchControllerRef: true
              scalingConfig:
              - desiredSize: 1
                maxSize: 10
                minSize: 1
        patches:
        - type: PatchSet
          patchSetName: aws-region
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
        - fromFieldPath: spec.parameters.vpc.subnets-private-id
          toFieldPath: spec.forProvider.subnetIds
        - fromFieldPath: spec.parameters.nodeSize
          toFieldPath: spec.forProvider.instanceTypes[0]
          transforms:
          - map:
              large: t3.large
              medium: t3.medium
              small: t3.small
            type: map
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.nodeRoleArnSelector.matchLabels.role
          transforms:
          - string:
              fmt: '%s-nodegroup'
              type: Format
            type: string
        - fromFieldPath: spec.parameters.minNodeCount
          toFieldPath: spec.forProvider.scalingConfig[0].minSize
        - fromFieldPath: spec.parameters.minNodeCount
          toFieldPath: spec.forProvider.scalingConfig[0].desiredSize
        - fromFieldPath: status.conditions[0].reason
          toFieldPath: status.nodePoolStatus
          type: ToCompositeFieldPath
      - name: iamrole-controlplane
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: Role
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              assumeRolePolicy: |-
                {
                  "Version": "2012-10-17",
                  "Statement": [{
                    "Effect": "Allow",
                    "Principal": {"Service": ["eks.amazonaws.com"]},
                    "Action": ["sts:AssumeRole"]
                  }]
                }
        patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - string:
              fmt: '%s-controlplane'
              type: Format
            type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.labels.role
          transforms:
          - string:
              fmt: '%s-controlplane'
              type: Format
            type: string
      - name: iamrole-nodegroup
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: Role
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              assumeRolePolicy: |-
                {
                  "Version": "2012-10-17",
                  "Statement": [{
                    "Effect": "Allow",
                    "Principal": {"Service": ["ec2.amazonaws.com"]},
                    "Action": ["sts:AssumeRole"]
                  }]
                }
        patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - string:
              fmt: '%s-nodegroup'
              type: Format
            type: string
        - fromFieldPath: spec.id
          toFieldPath: metadata.labels.role
          transforms:
          - string:
              fmt: '%s-nodegroup'
              type: Format
            type: string
        - fromFieldPath: status.atProvider.arn
          policy:
            fromFieldPath: Optional
          toFieldPath: status.eks.nodeGroupRoleArn
          type: ToCompositeFieldPath
      - name: iamattachment-controlplane
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              policyArn: arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
              roleSelector:
                matchControllerRef: true
        patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - string:
              fmt: '%s-controlplane'
              type: Format
            type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.roleSelector.matchLabels.role
          transforms:
          - string:
              fmt: '%s-controlplane'
              type: Format
            type: string
      - name: iamattachment-service
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              policyArn: arn:aws:iam::aws:policy/AmazonEKSServicePolicy
              roleSelector:
                matchControllerRef: true
        patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - string:
              fmt: '%s-service'
              type: Format
            type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.roleSelector.matchLabels.role
          transforms:
          - string:
              fmt: '%s-controlplane'
              type: Format
            type: string
      - name: iamattachment-worker
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
              roleSelector:
                matchControllerRef: true
        patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - string:
              fmt: '%s-worker'
              type: Format
            type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.roleSelector.matchLabels.role
          transforms:
          - string:
              fmt: '%s-nodegroup'
              type: Format
            type: string
      - name: iamattachment-cni
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
              roleSelector:
                matchControllerRef: true
        patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - string:
              fmt: '%s-cni'
              type: Format
            type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.roleSelector.matchLabels.role
          transforms:
          - string:
              fmt: '%s-nodegroup'
              type: Format
            type: string
      - name: iamattachment-registry
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
              roleSelector:
                matchControllerRef: true
        patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - string:
              fmt: '%s-registry'
              type: Format
            type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.roleSelector.matchLabels.role
          transforms:
          - string:
              fmt: '%s-nodegroup'
              type: Format
            type: string

      - name: nodepool-sg
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroup
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              description: Cluster communication with worker nodes
        patches:
        - type: PatchSet
          patchSetName: aws-region
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-sg'
                type: Format
              type: string
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.name
          transforms:
            - string:
                fmt: '%s-sg'
                type: Format
              type: string
        - fromFieldPath: spec.parameters.vpc.vpcID
          toFieldPath: spec.forProvider.vpcId
        readinessChecks:
        - type: None
      - name: nodepool-sg-rule00
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroupRule
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              description: Rule for internal communication between SG
              fromPort: 0
              protocol: "-1"
              securityGroupIdSelector:
                matchControllerRef: true
              toPort: 0
              type: ingress
              self: true
        patches:
        - type: PatchSet
          patchSetName: aws-region
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-rule-sg00'
                type: Format
              type: string
      - name: nodepool-sg-rule01
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroupRule
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              cidrBlocks:
              - 10.0.0.0/8
              description: RFC1918 allow internal communication
              fromPort: 0
              protocol: "-1"
              securityGroupIdSelector:
                matchControllerRef: true
              toPort: 0
              type: ingress
        patches:
        - type: PatchSet
          patchSetName: aws-region
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-rule-sg01'
                type: Format
              type: string
      - name: nodepool-sg-rule02
        base:
          apiVersion: ec2.aws.upbound.io/v1beta1
          kind: SecurityGroupRule
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              cidrBlocks:
              - 0.0.0.0/0
              description: Egress Allowed
              fromPort: 0
              protocol: "-1"
              securityGroupIdSelector:
                matchControllerRef: true
              toPort: 0
              type: egress
        patches:
        - type: PatchSet
          patchSetName: aws-region
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-rule-sg02'
                type: Format
              type: string

      - name: addonCni
        base:
          apiVersion: eks.aws.upbound.io/v1beta1
          kind: Addon
          metadata:
            name: aws-vpc-cni
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              addonName: vpc-cni
              clusterNameSelector:
                matchControllerRef: true
        patches:
        - type: PatchSet
          patchSetName: aws-region
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - string:
              fmt: '%s-cni'
              type: Format
            type: string
      - name: addonCoreDns
        base:
          apiVersion: eks.aws.upbound.io/v1beta1
          kind: Addon
          metadata:
            name: aws-coredns
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              addonName: coredns
              clusterNameSelector:
                matchControllerRef: true
        patches:
        - type: PatchSet
          patchSetName: aws-region
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - string:
              fmt: '%s-coredns'
              type: Format
            type: string
      - name: addonKubeProxy
        base:
          apiVersion: eks.aws.upbound.io/v1beta1
          kind: Addon
          metadata:
            name: aws-kube-proxy
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              addonName: kube-proxy
              clusterNameSelector:
                matchControllerRef: true
        patches:
        - type: PatchSet
          patchSetName: aws-region
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - string:
              fmt: '%s-kubeproxy'
              type: Format
            type: string

      - name: awsAuth
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          spec:
            deletionPolicy: Orphan
            forProvider:
              manifest:
                apiVersion: v1
                kind: ConfigMap
                metadata:
                  name: aws-auth
                  namespace: kube-system
        patches:
          - fromFieldPath: spec.id
            toFieldPath: spec.providerConfigRef.name
          - fromFieldPath: spec.id
            toFieldPath: metadata.name
            transforms:
              - string:
                  fmt: "%s-aws-auth"
                  type: Format
                type: string
            type: FromCompositeFieldPath
          - combine:
              strategy: string
              string:
                fmt: |
                  - rolearn: "%s"
                    username: system:node:{{EC2PrivateDNSName}}
                    groups:
                      - system:bootstrappers
                      - system:nodes
                  - rolearn: "%s"
                    username: adminrole
                    groups:
                      - system:masters
                  - "groups":
                    - "system:masters"
                    "rolearn": "arn:aws:iam::787843526639:role/AWSReservedSSO_AWSAdministratorAccess_ba0ccc6c0012ab35"
                    "username": "admin"
                  - "groups":
                    - "system:bootstrappers"
                    - "system:nodes"
                    "rolearn": "%s"
                    "username": "system:node:{{EC2PrivateDNSName}}"
              variables:
                - fromFieldPath: status.eks.nodeGroupRoleArn
                - fromFieldPath: spec.parameters.iam.roleArnAdmin
                - fromFieldPath: status.karpenter.instanceProfileRoleArn
            policy:
              fromFieldPath: Optional
            toFieldPath: spec.forProvider.manifest.data.mapRoles
            type: CombineFromComposite
###
#OIDC Provider
      - name: oidc-provider
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: OpenIDConnectProvider
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              clientIdList:
                - sts.amazonaws.com
              thumbprintList:
                - 9e99a48a9960b14926bb7f3b02e22da2b0ab7280
        patches:
          - fromFieldPath: status.eks.oidc
            policy:
              fromFieldPath: Required
            toFieldPath: spec.forProvider.url
            type: FromCompositeFieldPath
          - fromFieldPath: status.atProvider.arn
            policy:
              fromFieldPath: Optional
            toFieldPath: status.eks.oidcArn
            type: ToCompositeFieldPath
### END OIDC Provider


###
# ALB Controller Role
      - name: iamrole-albcontroller
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: Role
          metadata:
            labels:
              role: alb-controller
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              description: ALB controller role
              assumeRolePolicy: |-
                {}
        patches:
          - combine:
              strategy: string
              string:
                fmt: |
                  {
                    "Version": "2012-10-17",
                    "Statement": [{
                      "Effect": "Allow",
                      "Principal": {
                          "Federated": "%s"
                      },
                      "Action": "sts:AssumeRoleWithWebIdentity",
                      "Condition": {
                          "StringEquals": {
                              "%s:aud": "sts.amazonaws.com",
                              "%s:sub": "system:serviceaccount:kube-system:aws-load-balancer-controller-sa"
                          }
                      }
                    }]
                  }
              variables:
                - fromFieldPath: status.eks.oidcArn
                - fromFieldPath: status.eks.oidcUri
                - fromFieldPath: status.eks.oidcUri
            policy:
              fromFieldPath: Optional
            toFieldPath: spec.forProvider.assumeRolePolicy
            type: CombineFromComposite
          - fromFieldPath: spec.id
            toFieldPath: metadata.name
            transforms:
              - string:
                  fmt: '%s-alb-controller'
                  type: Format
                type: string
            type: FromCompositeFieldPath
          - fromFieldPath: spec.id
            toFieldPath: metadata.annotations[crossplane.io/external-name]
            transforms:
              - string:
                  fmt: alb-controller-noderole-%s
                  type: Format
                type: string
            type: FromCompositeFieldPath
          - fromFieldPath: status.atProvider.arn
            policy:
              fromFieldPath: Optional
            toFieldPath: status.albcontroller.instanceProfileRoleArn
            type: ToCompositeFieldPath
          - fromFieldPath: status.atProvider.id
            policy:
              fromFieldPath: Optional
            toFieldPath: status.albcontroller.RoleName
            type: ToCompositeFieldPath
          - fromFieldPath: status.atProvider.arn
            toFieldPath: status.albcontroller.accountId
            transforms:
              - string:
                  regexp:
                    group: 1
                    match: '::(\d+):'
                  type: Regexp
                type: string
            type: ToCompositeFieldPath

      - name: iamattach-albcontroller-ekspolicy
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              policyArn: arn:aws:iam::787843526639:policy/alb-controller-20240327011554462600000001
              roleSelector:
                matchControllerRef: true
                matchLabels:
                  role: alb-controller

###END Role ALB controller

###
# Crossplane Role
      - name: iamrole-crossplane-target
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: Role
          metadata:
            labels:
              role: crossplane-role
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              description: crossplane role
              assumeRolePolicy: |-
                {}
        patches:
          - combine:
              strategy: string
              string:
                fmt: |
                  {
                    "Version": "2012-10-17",
                    "Statement": [{
                      "Effect": "Allow",
                      "Principal": {
                          "Federated": "%s"
                      },
                      "Action": "sts:AssumeRoleWithWebIdentity",
                      "Condition": {
                          "StringLike": {
                              "%s:aud": "sts.amazonaws.com",
                              "%s:sub": "system:serviceaccount:crossplane-system:provider-aws-*"
                          }
                      }
                    },
                    {
                      "Effect": "Allow",
                      "Principal": {
                          "Service": "ec2.amazonaws.com"
                      },
                      "Action": "sts:AssumeRole"
                    }
                    ]
                  }
              variables:
                - fromFieldPath: status.eks.oidcArn
                - fromFieldPath: status.eks.oidcUri
                - fromFieldPath: status.eks.oidcUri
            policy:
              fromFieldPath: Optional
            toFieldPath: spec.forProvider.assumeRolePolicy
            type: CombineFromComposite
          - fromFieldPath: spec.id
            toFieldPath: metadata.name
            transforms:
              - string:
                  fmt: '%s-crossplane'
                  type: Format
                type: string
            type: FromCompositeFieldPath
          - fromFieldPath: spec.id
            toFieldPath: metadata.annotations[crossplane.io/external-name]
            transforms:
              - string:
                  fmt: crossplane-noderole-%s
                  type: Format
                type: string
            type: FromCompositeFieldPath
          - fromFieldPath: status.atProvider.arn
            policy:
              fromFieldPath: Optional
            toFieldPath: status.crossplane.instanceProfileRoleArn
            type: ToCompositeFieldPath
          - fromFieldPath: status.atProvider.id
            policy:
              fromFieldPath: Optional
            toFieldPath: status.crossplane.RoleName
            type: ToCompositeFieldPath
          - fromFieldPath: status.atProvider.arn
            toFieldPath: status.crossplane.accountId
            transforms:
              - string:
                  regexp:
                    group: 1
                    match: '::(\d+):'
                  type: Regexp
                type: string
            type: ToCompositeFieldPath

      - name: iamattach-crossplane-ekspolicy
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              policyArn: arn:aws:iam::aws:policy/AdministratorAccess
              roleSelector:
                matchControllerRef: true
                matchLabels:
                  role: crossplane-role

###END Role Crossplane

###
#Karpenter Role Node
      - name: iamrole-karpenter
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: Role
          metadata:
            labels:
              role: karpenter
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              assumeRolePolicy: |-
                {
                  "Version": "2012-10-17",
                  "Statement": [{
                    "Effect": "Allow",
                    "Principal": {"Service": ["ec2.amazonaws.com"]},
                    "Action": ["sts:AssumeRole"]
                  }]
                }
        patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
            - string:
                fmt: '%s-karpenter'
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.id
          toFieldPath: metadata.annotations[crossplane.io/external-name]
          transforms:
            - string:
                fmt: karpenter-noderole-%s
                type: Format
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: status.atProvider.arn
          policy:
            fromFieldPath: Optional
          toFieldPath: status.karpenter.instanceProfileRoleArn
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.id
          policy:
            fromFieldPath: Optional
          toFieldPath: status.karpenter.roleName
          type: ToCompositeFieldPath
        - fromFieldPath: status.atProvider.arn
          toFieldPath: status.karpenter.accountId
          transforms:
            - string:
                regexp:
                  group: 1
                  match: '::(\d+):'
                type: Regexp
              type: string
          type: ToCompositeFieldPath

      - name: iamattach-karpenter-ekspolicy
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              policyArn: arn:aws:iam::aws:policy/AmazonEKSWorkerNodePolicy
              roleSelector:
                matchControllerRef: true
                matchLabels:
                  role: karpenter
      - name: iamattach-karpenter-cnipolicy
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              policyArn: arn:aws:iam::aws:policy/AmazonEKS_CNI_Policy
              roleSelector:
                matchControllerRef: true
                matchLabels:
                  role: karpenter
      - name: iamattach-karpenter-ecrpolicy
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              policyArn: arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
              roleSelector:
                matchControllerRef: true
                matchLabels:
                  role: karpenter
      - name: iamattach-karpenter-ssmpolicy
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              policyArn: arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore
              roleSelector:
                matchControllerRef: true
                matchLabels:
                  role: karpenter
      - name: karpenter-instance-profile
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: InstanceProfile
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              roleSelector:
                matchControllerRef: true
                matchLabels:
                  role: karpenter
        patches:
          - type: ToCompositeFieldPath
            fromFieldPath: status.atProvider.arn
            policy:
              fromFieldPath: Optional
            toFieldPath: status.karpenter.instanceProfileArn
          - type: ToCompositeFieldPath
            fromFieldPath: status.atProvider.id
            policy:
              fromFieldPath: Optional
            toFieldPath: status.karpenter.instanceProfileName
##END karpenter role node

###
#Karpenter IRSA
      - name: karpenter-irsa-role
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: Role
          metadata:
            labels:
              resource: karpenter-irsa-role
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              description: Karpenter IRSA Role
        patches:
          - fromFieldPath: spec.id
            toFieldPath: metadata.name
            transforms:
              - string:
                  fmt: '%s-karpenter-irsa-role'
                  type: Format
                type: string
            type: FromCompositeFieldPath
          - fromFieldPath: spec.id
            toFieldPath: metadata.annotations[crossplane.io/external-name]
            transforms:
              - string:
                  fmt: karpenter-irsa-role-%s
                  type: Format
                type: string
            type: FromCompositeFieldPath
          - fromFieldPath: status.atProvider.arn
            policy:
              fromFieldPath: Optional
            toFieldPath: status.karpenter.irsaRoleArn
            type: ToCompositeFieldPath
          - fromFieldPath: status.atProvider.id
            policy:
              fromFieldPath: Optional
            toFieldPath: status.karpenter.irsaRoleName
            type: ToCompositeFieldPath
          - fromFieldPath: status.karpenter.conditions
            policy:
              fromFieldPath: Optional
            toFieldPath: status.observed.role.conditions
            type: ToCompositeFieldPath
          - combine:
              strategy: string
              string:
                fmt: |
                  {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Principal": {
                          "Federated": "%[1]s"
                        },
                        "Action": "sts:AssumeRoleWithWebIdentity",
                        "Condition": {
                          "StringEquals": {
                              "%[2]s:aud": "sts.amazonaws.com",
                              "%[2]s:sub": "system:serviceaccount:karpenter:karpenter"
                          }
                        }
                      }
                    ]
                  }
              variables:
                - fromFieldPath: status.eks.oidcArn
                - fromFieldPath: status.eks.oidcUri
            toFieldPath: spec.forProvider.assumeRolePolicy
            type: CombineFromComposite

      - name: karpenter-irsa-policy
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: Policy
          metadata:
            labels:
              resource: karpenter-irsa-policy
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              description: Karpenter IRSA Policy
        patches:
          - fromFieldPath: spec.id
            toFieldPath: metadata.name
            transforms:
              - string:
                  fmt: '%s-karpenter-irsa'
                  type: Format
                type: string
            type: FromCompositeFieldPath
          - fromFieldPath: spec.id
            toFieldPath: metadata.annotations[crossplane.io/external-name]
            transforms:
              - string:
                  fmt: karpenter-irsa-%s
                  type: Format
                type: string
            type: FromCompositeFieldPath
          - fromFieldPath: metadata.annotations[crossplane.io/external-name]
            toFieldPath: status.karpenter.karpenterIrsaPolicyArn
            type: ToCompositeFieldPath
          - combine:
              strategy: string
              string:
                fmt: |
                  {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Action": [
                                "ec2:DescribeSubnets",
                                "ec2:DescribeSpotPriceHistory",
                                "ec2:DescribeSecurityGroups",
                                "ec2:DescribeLaunchTemplates",
                                "ec2:DescribeInstances",
                                "ec2:DescribeInstanceTypes",
                                "ec2:DescribeInstanceTypeOfferings",
                                "ec2:DescribeImages",
                                "ec2:DescribeAvailabilityZones"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": [
                                "ec2:RunInstances",
                                "ec2:DeleteLaunchTemplate",
                                "ec2:CreateTags",
                                "ec2:CreateLaunchTemplate",
                                "ec2:CreateFleet"
                            ],
                            "Effect": "Allow",
                            "Resource": [
                                "arn:aws:ec2:%[1]s::image/*",
                                "arn:aws:ec2:%[1]s:%[2]s:*"
                            ]
                        },
                        {
                            "Action": "iam:PassRole",
                            "Effect": "Allow",
                            "Resource": "arn:aws:iam::%[2]s:role/%[3]s"
                        },
                        {
                            "Action": "pricing:GetProducts",
                            "Effect": "Allow",
                            "Resource": "*"
                        },
                        {
                            "Action": "ssm:GetParameter",
                            "Effect": "Allow",
                            "Resource": "arn:aws:ssm:%[1]s::parameter/aws/service/*"
                        },
                        {
                            "Action": "eks:DescribeCluster",
                            "Effect": "Allow",
                            "Resource": "arn:aws:eks:*:%[2]s:cluster/%[5]s"
                        },
                        {
                            "Action": "ec2:TerminateInstances",
                            "Condition": {
                                "StringLike": {
                                    "ec2:ResourceTag/kubernetes.io/cluster/%[5]s": "*"
                                }
                            },
                            "Effect": "Allow",
                            "Resource": "arn:aws:ec2:%[1]s:%[2]s:instance/*"
                        },
                        {
                            "Action": [
                                "sqs:ReceiveMessage",
                                "sqs:GetQueueUrl",
                                "sqs:GetQueueAttributes",
                                "sqs:DeleteMessage"
                            ],
                            "Effect": "Allow",
                            "Resource": "arn:aws:sqs:%[1]s:%[2]s:%[4]s"
                        },
                        {
                            "Action": [
                                "iam:TagInstanceProfile",
                                "iam:RemoveRoleFromInstanceProfile",
                                "iam:GetInstanceProfile",
                                "iam:DeleteInstanceProfile",
                                "iam:CreateInstanceProfile",
                                "iam:AddRoleToInstanceProfile"
                            ],
                            "Effect": "Allow",
                            "Resource": "*"
                        }
                    ]
                  }
              variables:
                - fromFieldPath: spec.parameters.region
                - fromFieldPath: status.karpenter.accountId
                - fromFieldPath: status.karpenter.roleName
                - fromFieldPath: status.karpenter.sqsQueueName
                - fromFieldPath: status.eks.clusterName
            policy:
              fromFieldPath: Optional
            toFieldPath: spec.forProvider.policy
            type: CombineFromComposite

      - name: karpenter-irsa-attachment
        base:
          apiVersion: iam.aws.upbound.io/v1beta1
          kind: RolePolicyAttachment
          metadata:
            labels:
              resource: karpenter-irsa-attachment
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              policyArnSelector:
                matchControllerRef: true
                matchLabels:
                  resource: karpenter-irsa-policy
              roleSelector:
                matchControllerRef: true
                matchLabels:
                  resource: karpenter-irsa-role
        # patches:
        #   - fromFieldPath: status.conditions
        #     policy:
        #       fromFieldPath: Optional
        #     toFieldPath: status.observed.rpa.conditions
        #     type: ToCompositeFieldPath

#END Karpenter IRSA

###
# SQS
      - name: sqsQueue
        base:
          apiVersion: sqs.aws.upbound.io/v1beta1
          kind: Queue
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              messageRetentionSeconds: 300
        patches:
          - type: PatchSet
            patchSetName: aws-region
          - type: FromCompositeFieldPath
            fromFieldPath: spec.id
            toFieldPath: spec.forProvider.name
            transforms:
              - string:
                  fmt: '%s-sqs-karpenter'
                  type: Format
                type: string
          - type: ToCompositeFieldPath
            fromFieldPath: status.atProvider.arn
            policy:
              fromFieldPath: Optional
            toFieldPath: status.karpenter.sqsQueueArn
          - type: ToCompositeFieldPath
            fromFieldPath: status.atProvider.name
            policy:
              fromFieldPath: Optional
            toFieldPath: status.karpenter.sqsQueueName
      - name: sqsQueuePolicy
        base:
          apiVersion: sqs.aws.upbound.io/v1beta1
          kind: QueuePolicy
          spec:
            providerConfigRef:
              name: aws-provider-config
            forProvider:
              queueUrlSelector:
                matchControllerRef: true
        patches:
          - type: PatchSet
            patchSetName: aws-region
          - type: CombineFromComposite
            combine:
              strategy: string
              string:
                fmt: |
                  {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Sid": "SqsWrite",
                        "Effect": "Allow",
                        "Principal": "*",
                        "Action": "sqs:SendMessage",
                        "Resource": "%s",
                        "Principal": {
                          "Service": [
                            "events.amazonaws.com",
                            "sqs.amazonaws.com"
                          ]
                        }
                      }
                    ]
                  }
              variables:
                - fromFieldPath: status.karpenter.sqsQueueArn
            policy:
              fromFieldPath: Required
            toFieldPath: spec.forProvider.policy
##END SQS

      - name: DataPlaneWorkload
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          spec:
            deletionPolicy: Orphan
            forProvider:
              manifest:
                apiVersion: argoproj.io/v1alpha1
                kind: Application
                metadata:
                  name: workload-data-plane
                  namespace: argocd
                spec:
                  destination:
                    name: in-cluster
                    namespace: default
                  project: default
                  source:
                    repoURL: 'https://github.com/JOAMELO-ORG/eks-blueprints-add-ons'
                    path: 'gitops'
                    targetRevision: main
                    directory:
                      recurse: true
                  syncPolicy:
                    automated:
                      prune: true
                      selfHeal: true
        patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
        # - fromFieldPath: spec.id
        #   toFieldPath: spec.destination.namespace


      - name: ApllicationSetArgoControlAddons
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          spec:
            deletionPolicy: Orphan
            forProvider:
              manifest:
                apiVersion: argoproj.io/v1alpha1
                kind: ApplicationSet
                metadata:
                  name: cluster-addons
                  namespace: argocd
                spec:
                  syncPolicy:
                    preserveResourcesOnDeletion: true
                  generators:
                    - clusters: {}
                  template:
                    metadata:
                      name: cluster-addons
                    spec:
                      project: default
                      source:
                        repoURL: '{{metadata.annotations.addons_repo_url}}'
                        path: '{{metadata.annotations.addons_repo_basepath}}{{metadata.annotations.addons_repo_path}}'
                        targetRevision: '{{metadata.annotations.addons_repo_revision}}'
                        directory:
                          recurse: true
                      destination:
                        namespace: argocd
                        name: '{{name}}'
                      syncPolicy:
                        automated: {}
        patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name

      - name: SecretArgo
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          spec:
            deletionPolicy: Orphan
            forProvider:
              manifest:
                apiVersion: v1
                kind: Secret
                metadata:
                  name: in-cluster
                  namespace: argocd
                  labels:
                    "argocd.argoproj.io/secret-type": "cluster"
                    "cluster_name": "in-cluster"
                    "enable_ack_apigatewayv2": "false"
                    "enable_ack_dynamodb": "false"
                    "enable_ack_emrcontainers": "false"
                    "enable_ack_eventbridge": "false"
                    "enable_ack_prometheusservice": "false"
                    "enable_ack_rds": "false"
                    "enable_ack_s3": "false"
                    "enable_ack_sfn": "false"
                    "enable_argo_events": "false"
                    "enable_argo_rollouts": "false"
                    "enable_argo_workflows": "false"
                    "enable_argocd": "true"
                    "enable_aws_cloudwatch_metrics": "false"
                    "enable_aws_crossplane_provider": "false"
                    "enable_aws_crossplane_upbound_provider": "true"
                    "enable_aws_ebs_csi_resources": "false"
                    "enable_aws_efs_csi_driver": "false"
                    "enable_aws_for_fluentbit": "false"
                    "enable_aws_fsx_csi_driver": "false"
                    "enable_aws_gateway_api_controller": "false"
                    "enable_aws_load_balancer_controller": "true"
                    "enable_aws_node_termination_handler": "false"
                    "enable_aws_privateca_issuer": "false"
                    "enable_aws_secrets_store_csi_driver_provider": "false"
                    "enable_cert_manager": "false"
                    "enable_cluster_autoscaler": "false"
                    "enable_cluster_proportional_autoscaler": "false"
                    "enable_crossplane": "true"
                    "enable_crossplane_helm_provider": "true"
                    "enable_crossplane_kubernetes_provider": "true"
                    "enable_external_dns": "false"
                    "enable_external_secrets": "false"
                    "enable_fargate_fluentbit": "false"
                    "enable_gatekeeper": "false"
                    "enable_gpu_operator": "false"
                    "enable_ingress_nginx": "false"
                    "enable_karpenter": "true"
                    "enable_kube_prometheus_stack": "false"
                    "enable_kyverno": "false"
                    "enable_metrics_server": "true"
                    "enable_prometheus_adapter": "false"
                    "enable_secrets_store_csi_driver": "false"
                    "enable_velero": "false"
                    "enable_vpa": "false"
                    "environment": "dev"
                  annotations:
                    "addons_repo_basepath": "argocd/"
                    "addons_repo_path": "bootstrap/control-plane/addons"
                    "addons_repo_revision": "main"
                    "addons_repo_url": "https://github.com/JOAMELO-ORG/eks-blueprints-add-ons"
                    "aws_account_id": "787843526639"
                    "aws_load_balancer_controller_namespace": "kube-system"
                    "aws_load_balancer_controller_service_account": "aws-load-balancer-controller-sa"
                    "aws_region": "us-east-1"
                    "aws_vpc_id": "vpc-0ed4173d8c80802b8"
                    "cluster_name": "in-cluster"
                    "environment": "dev"
                    "karpenter_namespace": "karpenter"
                    "karpenter_service_account": "karpenter"
                    "workload_repo_basepath": "patterns/gitops/"
                    "workload_repo_path": "getting-started-argocd/k8s"
                    "workload_repo_revision": "main"
                    "workload_repo_url": "https://github.com/JOAMELO-ORG/terraform-aws-eks-blueprints"
                data:
                  name: "aW4tY2x1c3Rlcg=="
                  server: "aHR0cHM6Ly9rdWJlcm5ldGVzLmRlZmF1bHQuc3Zj"
                  config: "eyJ0bHNDbGllbnRDb25maWciOnsiaW5zZWN1cmUiOmZhbHNlfX0="
        patches:
        - fromFieldPath: spec.id
          toFieldPath: spec.providerConfigRef.name
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.metadata.labels.aws_cluster_name
        - fromFieldPath: spec.parameters.version
          toFieldPath: spec.forProvider.manifest.metadata.labels.kubernetes_version
        - fromFieldPath: spec.id
          toFieldPath: spec.forProvider.manifest.metadata.annotations.aws_cluster_name
        - fromFieldPath: status.albcontroller.instanceProfileRoleArn
          toFieldPath: spec.forProvider.manifest.metadata.annotations.aws_load_balancer_controller_iam_role_arn
        - fromFieldPath: status.karpenter.instanceProfileRoleArn
          toFieldPath: spec.forProvider.manifest.metadata.annotations.karpenter_node_instance_profile_name
        - fromFieldPath: status.karpenter.roleName
          toFieldPath: spec.forProvider.manifest.metadata.annotations.karpenter_node_iam_role_name
        - fromFieldPath: status.karpenter.irsaRoleArn
          toFieldPath: spec.forProvider.manifest.metadata.annotations.karpenter_iam_role_arn
        - fromFieldPath: status.karpenter.sqsQueueName
          toFieldPath: spec.forProvider.manifest.metadata.annotations.karpenter_sqs_queue_name
        - fromFieldPath: status.crossplane.instanceProfileRoleArn
          toFieldPath: spec.forProvider.manifest.metadata.annotations.aws_crossplane_iam_role_arn
        - fromFieldPath: status.crossplane.instanceProfileRoleArn
          toFieldPath: spec.forProvider.manifest.metadata.annotations.aws_upbound_crossplane_iam_role_arn
        - fromFieldPath: status.albcontroller.accountId
          toFieldPath: spec.forProvider.manifest.metadata.annotations.aws_account_id

      - name: helm
        base:
          apiVersion: helm.crossplane.io/v1beta1
          kind: ProviderConfig
          spec:
            credentials:
              secretRef:
                key: kubeconfig
                name: kubeconfig
                namespace: crossplane-system
              source: Secret
        patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
        - fromFieldPath: spec.id
          toFieldPath: spec.credentials.secretRef.name
          transforms:
          - string:
              fmt: '%s-cluster'
              type: Format
            type: string
        readinessChecks:
        - type: None
      - name: helm-local
        base:
          apiVersion: helm.crossplane.io/v1beta1
          kind: ProviderConfig
          spec:
            credentials:
              source: InjectedIdentity
        patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
          transforms:
          - string:
              fmt: '%s-local'
              type: Format
            type: string
        - fromFieldPath: metadata.annotations
          toFieldPath: metadata.annotations
        readinessChecks:
        - type: None

      - name: kubernetes
        base:
          apiVersion: kubernetes.crossplane.io/v1alpha1
          kind: ProviderConfig
          spec:
            credentials:
              secretRef:
                key: kubeconfig
                name: kubeconfig
                namespace: crossplane-system
              source: Secret
        patches:
        - fromFieldPath: spec.id
          toFieldPath: metadata.name
        - fromFieldPath: spec.id
          toFieldPath: spec.credentials.secretRef.name
          transforms:
          - string:
              fmt: '%s-cluster'
              type: Format
            type: string
        readinessChecks:
        - type: None

  - functionRef:
      name: crossplane-contrib-function-go-templating
    step: app-crossplane
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      inline:
        template: |-
          {{ if .observed.composite.resource.spec.parameters.apps.crossplane.enabled }}
          ---
          apiVersion: helm.crossplane.io/v1beta1
          kind: Release
          metadata:
            name: '{{ $.observed.composite.resource.spec.id }}-app-crossplane'
            annotations:
              crossplane.io/external-name: crossplane
              gotemplating.fn.crossplane.io/composition-resource-name: '{{ $.observed.composite.resource.spec.id }}-app-crossplane'
          spec:
            forProvider:
              chart:
                name: crossplane
                repository: https://charts.crossplane.io/stable
                version: 1.14.5
                url: ""
              set: []
              values: {}
              namespace: crossplane-system
            rollbackLimit: 3
            providerConfigRef:
              name: '{{ $.observed.composite.resource.spec.id }}'
          {{ end }}
      kind: GoTemplate
      source: Inline

  - functionRef:
      name: crossplane-contrib-function-go-templating
    step: namespaces
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      inline:
        template: |-
          {{ range .observed.composite.resource.spec.parameters.namespaces }}
          ---
          apiVersion: kubernetes.crossplane.io/v1alpha2
          kind: Object
          metadata:
            name: {{ $.observed.composite.resource.spec.id }}-ns-{{ . }}
            annotations:
              crossplane.io/external-name: {{ . }}
              gotemplating.fn.crossplane.io/composition-resource-name: {{ $.observed.composite.resource.spec.id }}-ns-{{ . }}
          spec:
            forProvider:
              manifest:
                apiVersion: "v1"
                kind: "Namespace"
                metadata:
                  name: {{ . }}
            providerConfigRef:
              name: {{ $.observed.composite.resource.spec.id }}
          {{ end }}
      kind: GoTemplate
      source: Inline


  - functionRef:
      name: crossplane-contrib-function-go-templating
    step: argocd
    input:
      apiVersion: gotemplating.fn.crossplane.io/v1beta1
      inline:
        template: |-
          {{ if .observed.composite.resource.spec.parameters.apps.argocd.enabled }}
          ---
          apiVersion: helm.crossplane.io/v1beta1
          kind: Release
          metadata:
            name: '{{ $.observed.composite.resource.spec.id }}-argocd'
            annotations:
              crossplane.io/external-name: argocd
              gotemplating.fn.crossplane.io/composition-resource-name: '{{ $.observed.composite.resource.spec.id }}-app-argocd'
          spec:
            forProvider:
              chart:
                name: argo-cd
                repository: https://argoproj.github.io/argo-helm
                version: 5.45.0
                url: ""
              set: []
              values: {}
              namespace: argocd
            rollbackLimit: 3
            providerConfigRef:
              name: '{{ $.observed.composite.resource.spec.id }}'
          {{ end }}
      kind: GoTemplate
      source: Inline

  - functionRef:
      name: crossplane-contrib-function-auto-ready
    step: automatically-detect-ready-composed-resources
